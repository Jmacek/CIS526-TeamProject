#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Webapp:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var encryption = require('../authentication/encryption');
var server,serverType;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8081');
app.set('port', port);


/**
 * Create HTTP or HTTPS server.
 */
fs.access('authentication/server.crt', fs.F_OK, function(err){
  if(err) {
    //no server certificate, use http
    serverType = 'http';

    server = http.createServer(app);
  }
  else{
    //server certificate, use https
    serverType = 'https';
    var options = {
      key: encryption.servePrivKey(),
      cert: fs.readFileSync('authentication/server.crt'),
      requestCert:false,
      rejectUnauthorized:false
    };

    server = https.createServer(options,app);
  }
  startServer()
});

function startServer(){
  //The websocket io
  var io = require('socket.io').listen(server);//(server);
  var webSocket = require('../Websocket/gameController.js');

  io.on('connection', webSocket);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port, function(){
    console.log(serverType+" server started at port "+port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
